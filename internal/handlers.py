from telebot import types
from telebot.states import State, StatesGroup
from telebot.states.sync.context import StateContext

from internal import bot
from internal.utils import get_next_question_id, get_data_by_id
from internal.gamemode import Gamemode
from internal.gamemode import pretty_name
from . import user_statistics_storage


class GameStates(StatesGroup):
    gamemode_selecting = State()

class GTLStates(StatesGroup):
    guessing = State()
    answering = State()
    cancel_or_not = State()

class HAIStates(StatesGroup):
    guessing = State()
    answering = State()
    cancel_or_not = State()

users_states = {}

def finish_the_game(message: types.Message, state: StateContext):
    state.delete()
    bot.delete_state(message.from_user.id)
    markup = types.ReplyKeyboardRemove()
    bot.send_message(message.from_user.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! üöÄ", reply_markup=markup)

@bot.message_handler(state="*", commands=["stop"])
def stop_game(message: types.Message, state: StateContext):
    finish_the_game(message, state)

def send_scoreboard_for_mode(message: types.Message, gamemode: Gamemode):
    limit = 20
    scoreboard = user_statistics_storage.GetSorted(gamemode, limit)

    scoreboard_info = ""
    if (scoreboard == None):
        bot.send_message(message.from_user.id, f"–†–µ–π—Ç–∏–Ω–≥ {pretty_name(gamemode)} –ø—É—Å—Ç! :(")
        return

    for (username, win, total, rank) in scoreboard:
        if username == message.from_user.username:
            scoreboard_info += f"{rank}. @{username} {win}/{total} <--- Here you are!\n"
            continue
        scoreboard_info += f"{rank}. @{username} {win}/{total}\n"

    bot.send_message(message.from_user.id, f"–¢–æ–ø-{limit} –≤ —Ä–µ–∂–∏–º–µ {pretty_name(gamemode)}:\n{scoreboard_info}")

@bot.message_handler(state="*", commands=['score'])
def send_scoreboard(message: types.Message, state: StateContext):
    send_scoreboard_for_mode(message, Gamemode.GUESS_THE_LVL)
    send_scoreboard_for_mode(message, Gamemode.GUESS_HUMAN_OR_AI)

    select_gamemode_message(message, state)

@bot.message_handler(commands=['score'])
def send_scoreboard_without_session(message: types.Message):
    send_scoreboard_for_mode(message, Gamemode.GUESS_THE_LVL)
    send_scoreboard_for_mode(message, Gamemode.GUESS_HUMAN_OR_AI)

def send_stats_for_mode(message: types.Message, gamemode: Gamemode):
    user_id = message.from_user.id
    username = message.from_user.username

    win, total = user_statistics_storage.Get(username, gamemode)
    rank = user_statistics_storage.GetRank(username, gamemode)

    if rank == None:
        bot.send_message(user_id, f"–¢—ã –µ—â—ë –Ω–µ —Å—ã–≥—Ä–∞–ª –≤ {pretty_name(gamemode)}!")
        return
    stat_info = f"–¢–≤–æ–∏ —É—Å–ø–µ—Ö–∏ –≤ {pretty_name(gamemode)}: {win}/{total} (–ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: {rank})\n"
    bot.send_message(user_id, stat_info)

@bot.message_handler(state="*", commands=['stats'])
def send_stats(message: types.Message, state: StateContext):
    send_stats_for_mode(message, Gamemode.GUESS_THE_LVL)
    send_stats_for_mode(message, Gamemode.GUESS_HUMAN_OR_AI)

    select_gamemode_message(message, state)

@bot.message_handler(commands=['stats'])
def send_stats_without_session(message: types.Message):
    send_stats_for_mode(message, Gamemode.GUESS_THE_LVL)
    send_stats_for_mode(message, Gamemode.GUESS_HUMAN_OR_AI)

def help_message():
    return "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" \
              "/start - –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É\n" \
              "/stop - –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É\n" \
              "/score - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤\n" \
              "/stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n" \
              "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"

@bot.message_handler(state="*", commands=['help'])
def send_help(message: types.Message, state: StateContext):
    bot.send_message(message.from_user.id, help_message())

    select_gamemode_message(message, state)

@bot.message_handler(commands=['help'])
def send_help(message: types.Message):
    bot.send_message(message.from_user.id, help_message())

@bot.message_handler(state=[GTLStates.cancel_or_not, HAIStates.cancel_or_not])
def cancel_or_not(message: types.Message, state: StateContext):
    if message.text == "–ù–µ—Ç, —Ö–≤–∞—Ç–∏—Ç.":
        finish_the_game(message, state)
        return

    with state.data() as data:
        gamemode_type = data.get("cancel_or_not")
    if gamemode_type == Gamemode.GUESS_THE_LVL:
        state.set(GTLStates.guessing)
        guess_GTL(message, state)
        return
    
    if gamemode_type == Gamemode.GUESS_HUMAN_OR_AI:
        state.set(HAIStates.guessing)
        guess_HAI(message, state)
        return

    print("WARNING: Unknown state:", state)

def choose_next_action(message: types.Message):
    btn1 = types.KeyboardButton('–î–∞–≤–∞–π –¥–∞–ª—å—à–µ!')
    btn2 = types.KeyboardButton('–ù–µ—Ç, —Ö–≤–∞—Ç–∏—Ç.')

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(btn1, btn2)
    bot.send_message(message.from_user.id, "–ï—â—ë –æ–¥–Ω—É? üòâ", reply_markup=markup)

@bot.message_handler(state=GTLStates.answering)
def answer_GTL(message: types.Message, state: StateContext):
    user_id = message.from_user.id
    username = message.from_user.username

    gtl_data = users_states.get(user_id)

    if gtl_data == None:
        print("WARNING: User state is None")
        bot.send_message(user_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ -_-")
        return

    correct_answer = gtl_data["level"]
    if message.text == correct_answer:
        user_statistics_storage.AddWin(username, Gamemode.GUESS_THE_LVL)
        bot.send_message(user_id, "–í–µ—Ä–Ω–æ! üéâ\n")
        users_states[user_id] = None
    else:
        user_statistics_storage.AddFail(username, Gamemode.GUESS_THE_LVL)
        bot.send_message(user_id, r"–ù–µ–≤–µ—Ä–Ω–æ ¬Ø\_(„ÉÑ)_/¬Ø" + "\n")
        bot.send_message(user_id, f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}\n')
    bot.send_message(user_id, f'–ü–æ—è—Å–Ω–µ–Ω–∏–µ: {gtl_data["solution"]}\n')
    bot.send_message(user_id, f'–°—Å—ã–ª–∫–∞: {gtl_data["link"]}\n')

    choose_next_action(message)
    state.set(GTLStates.cancel_or_not)
    state.add_data(cancel_or_not = Gamemode.GUESS_THE_LVL)

def GTL_guess_buttons(message: types.Message, state: StateContext, question):
    state.set(GTLStates.answering)

    levels = ["Junior", "Middle", "Senior", "Lead"]
    years = ["0-1 years", "1-3 years", "3-6 years", "6+ years"]
    if question["is_level"]:
        buttons = [types.KeyboardButton(level) for level in levels]
    else:
        buttons = [types.KeyboardButton(year) for year in years]

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=4)
    markup.add(*buttons)
    bot.send_message(message.from_user.id, "Guess the Level!", reply_markup=markup)

def guess_GTL(message: types.Message, state):
    user_id = message.from_user.id
    username = message.from_user.username

    question_id = get_next_question_id(username, Gamemode.GUESS_THE_LVL)
    data = get_data_by_id(question_id, Gamemode.GUESS_THE_LVL)
    if data == None:
        print(f"WARNING: There is no more questions for user: {message.from_user.username}")
        bot.send_message(user_id, "–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –≤ —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ! ‚úä")
        
        select_gamemode_message(message, state)
        return

    users_states[user_id] = data

    bot.send_message(user_id, '```' + data["lang"] + '\n' + data["code"] + '```', parse_mode='Markdown')

    GTL_guess_buttons(message, state, data)

@bot.message_handler(state=HAIStates.answering)
def answer_HAI(message: types.Message, state: StateContext):
    user_id = message.from_user.id
    username = message.from_user.username

    hai_data = users_states.get(user_id)

    if hai_data == None:
        print("WARNING: User state is None")
        bot.send_message(user_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ -_-")
        return

    correct_anwer = "–ß–µ–ª–æ–≤–µ–∫" if hai_data["is_human"] else "–ë–µ–∑–¥—É—à–Ω–∞—è –º–∞—à–∏–Ω–∞ ü§ñ"
    if message.text == correct_anwer:
        user_statistics_storage.AddWin(username, Gamemode.GUESS_HUMAN_OR_AI)
        bot.send_message(user_id, "–í–µ—Ä–Ω–æ! üéâ")
        users_states[user_id] = None
    else:
        user_statistics_storage.AddFail(username, Gamemode.GUESS_HUMAN_OR_AI)
        bot.send_message(user_id, r"–ù–µ–≤–µ—Ä–Ω–æ ¬Ø\_(„ÉÑ)_/¬Ø" + "\n")

    choose_next_action(message)
    state.set(HAIStates.cancel_or_not)
    state.add_data(cancel_or_not = Gamemode.GUESS_HUMAN_OR_AI)

def HAI_guess_buttons(message: types.Message, state: StateContext):
    state.set(HAIStates.answering)

    candidates = ["–ß–µ–ª–æ–≤–µ–∫", "–ë–µ–∑–¥—É—à–Ω–∞—è –º–∞—à–∏–Ω–∞ ü§ñ"]
    buttons = [types.KeyboardButton(candidate) for candidate in candidates]
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=4)
    markup.add(*buttons)

    bot.send_message(message.from_user.id, "–£–≥–∞–¥–∞–π, —á–µ–ª–æ–≤–µ–∫ –∏–ª–∏ –ò–ò –Ω–∞–ø–∏—Å–∞–ª —ç—Ç–æ—Ç –∫–æ–¥?", reply_markup=markup)

def guess_HAI(message: types.Message, state: StateContext):
    user_id = message.from_user.id
    username = message.from_user.username

    question_id = get_next_question_id(username, Gamemode.GUESS_HUMAN_OR_AI)
    data = get_data_by_id(question_id, Gamemode.GUESS_HUMAN_OR_AI)
    if data == None:
        print(f"WARNING: There is no more questions for user: {message.from_user.username}")
        bot.send_message(user_id, "–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –≤ —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ! ‚úä")

        select_gamemode_message(message, state)
        return

    bot.send_message(user_id, '```' + data["lang"] + '\n' + data["code"] + '```', parse_mode='Markdown')

    users_states[user_id] = data

    HAI_guess_buttons(message, state)

@bot.message_handler(state=GameStates.gamemode_selecting)
def gamemode_selecting(message: types.Message, state: StateContext):
    if message.text == pretty_name(Gamemode.GUESS_THE_LVL):
        bot.send_message(message.from_user.id, '–ü–æ–µ—Ö–∞–ª–∏! üöÄ')
        state.set(GTLStates.guessing)
        guess_GTL(message, state)
    elif message.text == pretty_name(Gamemode.GUESS_HUMAN_OR_AI):
        bot.send_message(message.from_user.id, '–ü–æ–µ—Ö–∞–ª–∏! üöÄ')
        state.set(HAIStates.guessing)
        guess_HAI(message, state)

def select_gamemode_message(message: types.Message, state: StateContext):
    state.set(GameStates.gamemode_selecting)

    gamemodes = [pretty_name(gamemode) for gamemode in Gamemode]
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(*[types.KeyboardButton(mode) for mode in gamemodes])
    bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã:", reply_markup=markup)

@bot.message_handler(commands=['start'])
def send_welcome(message: types.Message, state: StateContext):
    bot.send_message(message.from_user.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É Guess the Something! üöÄ\n\n")

    select_gamemode_message(message, state)
